from groq import Groq
import json
import re
from faker import Faker
import logging
import db.config as config

# üëâ PON AQU√ç TU API KEY DE GROQ
API_KEY_GROQ = config.Clave

# Crea cliente Groq
client = Groq(api_key=API_KEY_GROQ)

# Instancia Faker en espa√±ol
fake = Faker("es_ES")


def generar_nombre_autor_unico(conn, max_intentos=10):
    """
    Genera un nombre aleatorio en espa√±ol que NO exista ya en la tabla rese√±as.
    Devuelve None si tras varios intentos no encuentra uno libre.
    """
    for intento in range(max_intentos):
        nombre = f"{fake.first_name()} {fake.last_name()}"
        with conn.cursor() as cursor:
            sql = """
                SELECT COUNT(*) as total
                FROM rese√±as
                WHERE autor = %s
            """
            cursor.execute(sql, (nombre,))
            existe = cursor.fetchone()
            if existe["total"] == 0:
                return nombre

    # Tras varios intentos, devuelve un nombre aunque no se sepa √∫nico
    logging.warning("‚ö†Ô∏è No se pudo generar autor √∫nico tras varios intentos. Se devuelve nombre aleatorio sin comprobar.")
    return f"{fake.first_name()} {fake.last_name()}"


def generar_rese√±as_groq(nombre_producto, descripcion_larga, conn):
    prompt = f"""
Eres un cliente real que escribe rese√±as aut√©nticas para productos de motocross y enduro en tiendas online. Hablas espa√±ol.

‚úÖ Devuelve SOLO el JSON solicitado. NO escribas ning√∫n texto fuera del JSON. NO utilices bloques de c√≥digo (no pongas ```json ni nada similar).

Genera exactamente 1 rese√±a realista para el producto: {nombre_producto}.

Basadas en la siguiente descripci√≥n del producto:

{descripcion_larga}

Cada rese√±a debe incluir:
- "titulo": breve, m√°ximo 8 palabras, en espa√±ol. SIN saltos de l√≠nea ni tabulaciones.
- "autor": escribe siempre el texto "placeholder". Yo sustituir√© luego el autor en Python.
- "estrellas": n√∫mero entero (no decimales), entre 3 y 5.
- "texto": texto breve y natural en espa√±ol, SIN saltos de l√≠nea ni tabulaciones. TODO en una sola l√≠nea.

‚úÖ Devuelve exclusivamente este JSON TODO en una sola l√≠nea (sin saltos de l√≠nea ni tabulaciones):

[
  {{
    "titulo": "...",
    "autor": "placeholder",
    "estrellas": n√∫mero,
    "texto": "..."
  }},
  ...
]
"""

    completion = client.chat.completions.create(
        model="llama3-8b-8192",
        messages=[
            {
                "role": "system",
                "content": "Eres un generador de rese√±as aut√©nticas para ecommerce especializado en motocross y enduro, en espa√±ol."
            },
            {
                "role": "user",
                "content": prompt
            }
        ],
        temperature=0.7
    )

    respuesta_texto = completion.choices[0].message.content.strip()
    print("Respuesta cruda Groq:", repr(respuesta_texto))

    # Quitar marcas de bloque de c√≥digo
    if respuesta_texto.startswith("```json"):
        respuesta_texto = respuesta_texto.replace("```json", "")
        respuesta_texto = respuesta_texto.replace("```", "")
        respuesta_texto = respuesta_texto.strip()

    # Eliminar saltos de l√≠nea dentro de strings
    def limpiar_string(match):
        texto = match.group(0)
        texto = texto.replace("\n", " ").replace("\t", " ")
        texto = " ".join(texto.split())
        return texto

    respuesta_texto = re.sub(r'"(.*?)"', limpiar_string, respuesta_texto)
    respuesta_texto = respuesta_texto.replace("\n", " ")
    respuesta_texto = respuesta_texto.replace("\t", " ")
    respuesta_texto = " ".join(respuesta_texto.split())

    start = respuesta_texto.find("[")
    end = respuesta_texto.rfind("]")

    if start != -1 and end != -1:
        respuesta_texto = respuesta_texto[start:end+1]
    else:
        if respuesta_texto.endswith('}"'):
            respuesta_texto = respuesta_texto[:-2] + "}]"
        elif respuesta_texto.endswith('}'):
            respuesta_texto = respuesta_texto + "]"
        elif respuesta_texto.endswith('"'):
            respuesta_texto = respuesta_texto[:-1] + "\"}]"
        else:
            respuesta_texto = respuesta_texto + "}]"

        if not respuesta_texto.startswith("["):
            respuesta_texto = "[" + respuesta_texto

    respuesta_texto = respuesta_texto.rstrip("'")

    try:
        rese√±as = json.loads(respuesta_texto)

        for review in rese√±as:
            autor_unico = generar_nombre_autor_unico(conn)
            review["autor"] = autor_unico

        return rese√±as

    except json.JSONDecodeError as e:
        print("‚ùå Error al parsear JSON:", e)
        print("Contenido recibido:", respuesta_texto)
        return []


def generar_meta_title_groq(nombre_producto, descripcion_larga):
    prompt = f"""
Eres un redactor SEO experto en ecommerce de motocross y enduro. Hablas espa√±ol.

Genera un META TITLE en espa√±ol para el producto: {nombre_producto}

- Basado tanto en el nombre del producto como en su descripci√≥n larga:
{descripcion_larga}

- M√°ximo 70 caracteres recomendado (puede ser algo menos, nunca m√°s de 75).
- Que sea natural, comercial, atractivo y optimizado para SEO.
- Evita palabras gen√©ricas como "compra", "oferta", "precio", salvo que sea relevante.
- No utilices etiquetas HTML ni comillas ni texto adicional.

‚úÖ Devuelve SOLO el texto plano. Sin JSON, sin etiquetas, sin bloques de c√≥digo.
"""

    completion = client.chat.completions.create(
        model="llama3-8b-8192",
        messages=[
            {
                "role": "system",
                "content": "Eres un generador de meta titles SEO en espa√±ol para ecommerce especializado en motocross y enduro."
            },
            {
                "role": "user",
                "content": prompt
            }
        ],
        temperature=0.7
    )

    respuesta_texto = completion.choices[0].message.content.strip()
    print("Meta Title generado:", repr(respuesta_texto))
    return respuesta_texto


def generar_meta_description_groq(nombre_producto, descripcion_larga):
    prompt = f"""
Eres un redactor SEO experto en ecommerce de motocross y enduro. Hablas espa√±ol.

Genera una META DESCRIPTION en espa√±ol para el producto: {nombre_producto}

- Basada tanto en el nombre del producto como en su descripci√≥n larga:
{descripcion_larga}

- M√°ximo 160 caracteres recomendado (puede ser algo menos, nunca m√°s de 170).
- Debe ser natural, comercial, convincente y orientada a SEO.
- No uses t√©rminos de otros deportes (como golf, running, ciclismo, etc.).
- No utilices etiquetas HTML ni comillas ni texto adicional.

‚úÖ Devuelve SOLO el texto plano. Sin JSON, sin etiquetas, sin bloques de c√≥digo.
"""

    completion = client.chat.completions.create(
        model="llama3-8b-8192",
        messages=[
            {
                "role": "system",
                "content": "Eres un generador de meta descriptions SEO en espa√±ol para ecommerce especializado en motocross y enduro."
            },
            {
                "role": "user",
                "content": prompt
            }
        ],
        temperature=0.7
    )

    respuesta_texto = completion.choices[0].message.content.strip()
    print("Meta Description generada:", repr(respuesta_texto))
    return respuesta_texto


def generar_descripcion_larga_groq(nombre_producto):
    prompt = f"""
Eres un redactor SEO experto en tiendas online de motocross y enduro. Hablas espa√±ol.

Genera una descripci√≥n LARGA en ESPA√ëOL para el producto: {nombre_producto}.

- Este producto es SIEMPRE ropa, accesorios o equipamiento de motocross o enduro, nunca de otros deportes.
- M√°ximo 250 palabras.
- Debe ser detallada, atractiva y optimizada para SEO.
- Incluye caracter√≠sticas, beneficios y motivos de compra espec√≠ficos para motocross o enduro.
- Integra palabras clave de forma natural en el texto, no en bloques al final.
- Usa lenguaje comercial y convincente, adaptado a ecommerce en espa√±ol.
- Sin errores gramaticales ni ortogr√°ficos.
- No uses etiquetas HTML ni formato especial.
- No incluyas comillas alrededor del texto. Devuelve solo texto plano, sin nada extra.

‚úÖ Devuelve SOLO el texto plano en espa√±ol. No escribas JSON, etiquetas HTML ni texto adicional antes o despu√©s.
"""

    completion = client.chat.completions.create(
        model="llama3-8b-8192",
        messages=[
            {
                "role": "system",
                "content": "Eres un generador de descripciones largas SEO en espa√±ol para ecommerce especializado en motocross y enduro."
            },
            {
                "role": "user",
                "content": prompt
            }
        ],
        temperature=0.7
    )

    respuesta_texto = completion.choices[0].message.content.strip()
    print("Descripci√≥n larga generada:", repr(respuesta_texto))
    return respuesta_texto


def generar_descripcion_larga_desde_existente_groq(nombre_producto, descripcion_larga_actual):
    prompt = f"""
Eres un redactor SEO experto en tiendas online de motocross y enduro. Hablas espa√±ol.

Tienes este NOMBRE DE PRODUCTO:
‚Üí {nombre_producto}

Y esta DESCRIPCI√ìN LARGA ACTUAL:
‚Üí {descripcion_larga_actual}

‚úÖ Genera una NUEVA descripci√≥n larga mejorada en ESPA√ëOL para el mismo producto, usando tanto el nombre como la descripci√≥n larga original, pero mejor√°ndola si es posible. Si la descripci√≥n actual es incompleta o mala, crea una completamente nueva basada en el nombre.

- M√°ximo 250 palabras.
- Debe ser detallada, atractiva y optimizada para SEO.
- Incluye caracter√≠sticas, beneficios y motivos de compra espec√≠ficos para motocross o enduro.
- Integra palabras clave de forma natural en el texto.
- Usa lenguaje comercial y convincente.
- Sin errores gramaticales ni ortogr√°ficos.
- No uses etiquetas HTML ni formato especial.
- No incluyas comillas alrededor del texto. Devuelve solo texto plano, sin nada extra.

‚úÖ Devuelve EXCLUSIVAMENTE el texto plano en espa√±ol. No escribas JSON ni bloques de c√≥digo ni nada adicional.
"""

    completion = client.chat.completions.create(
        model="llama3-8b-8192",
        messages=[
            {
                "role": "system",
                "content": "Eres un generador de descripciones largas SEO en espa√±ol para ecommerce especializado en motocross y enduro."
            },
            {
                "role": "user",
                "content": prompt
            }
        ],
        temperature=0.7
    )

    respuesta_texto = completion.choices[0].message.content.strip()
    print("Descripci√≥n larga (desde existente) generada:", repr(respuesta_texto))
    return respuesta_texto